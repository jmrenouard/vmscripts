### CONFIGURATED BY Vagrantfile.j2 and j2cli
unless Vagrant.has_plugin?("vagrant-vbguest")
  puts 'Installing vagrant-vbguest Plugin...'
  #system('vagrant plugin install vagrant-vbguest')
  system('vagrant.exe plugin install vagrant-vbguest')
end

unless Vagrant.has_plugin?("vagrant-hostmanager")
  puts 'Installing vagrant-hostmanager Plugin...'
  #system('vagrant plugin install vagrant-hostmanager')
  system('vagrant.exe plugin install vagrant-hostmanager')
end

Vagrant.configure("2") do |config|
    config.hostmanager.enabled = true
    config.hostmanager.manage_host = true
    config.hostmanager.manage_guest = true
    config.vm.synced_folder '.', '/vagrant', disabled: true
    config.vbguest.auto_update = false
    config.vm.boot_timeout = 600
{% for vm in Vms %}{% if Vms[vm]['enabled'] == 1 %}
    ### CONFIG {{ vm }} VM GENERATED
    config.vm.define "{{ vm }}" do |{{ vm }}|
      {{ vm }}.vm.box = "{{ Vms[vm]['distro'] }}"
      {{ vm }}.vm.hostname = '{{ vm }}.vm'
      {{ vm }}.hostmanager.enabled = true
      {% if Vms[vm]['ip_private'] is defined %}{{ vm }}.vm.network "private_network", type: 'static', adapter: 2, ip: "{{ Vms[vm]['ip_private'] }}", use_dhcp_assigned_default_route: true{% endif %}
      {% if Vms[vm]['ip_private2'] is defined %}{{ vm }}.vm.network "private_network", type: 'static', adapter: 3, ip: "{{ Vms[vm]['ip_private2'] }}", use_dhcp_assigned_default_route: true{% endif %}
      {% if Vms[vm]['public_dhcp_ip']==1 %}{{ vm }}.vm.network "public_network", type: 'dhcp', adapter: 4{% if NetInter is defined %}, bridge: "{{ NetInter }}"{% endif %}, use_dhcp_assigned_default_route: true{% endif %}
      {{ vm }}.hostmanager.manage_host = false
      {{ vm }}.hostmanager.manage_guest = true
      {{ vm }}.hostmanager.ignore_private_ip = false
      {{ vm }}.hostmanager.include_offline = true
      {{ vm }}.hostmanager.aliases = %w({{ vm }}.localdomain {{ vm }}.local {{ vm }}.vm)

      {{ vm }}.vm.provider "virtualbox" do |vb|
         vb.name="{{ vm }}"
         vb.gui = false
         vb.memory = {{ Vms[vm]['ram'] }}
         vb.cpus = {{ Vms[vm]['nbcpu'] }}
         vb.customize [ "modifyvm", :id, "--ioapic", "on" ]
         vb.customize [ "modifyvm", :id, "--groups", "/{{Group}}/{{LabName}}/{{ Vms[vm]['prefix'] }}" ]
         {% if Vms[vm]['ip_private'] is defined %}vb.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]{% endif %}
         {% if Vms[vm]['ip_private2'] is defined %}vb.customize ["modifyvm", :id, "--nicpromisc3", "allow-all"]{% endif %}
         {% if Vms[vm]['public_dhcp_ip']==1 %}vb.customize ["modifyvm", :id, "--nicpromisc4", "allow-all"]{% endif %}
      end
      {% if Vms[vm]['provision_script'] != '' %}{{ vm['name'] }}.vm.provision "shell", path: "{{ Vms[vm]['provision_script']}}" {% endif %}
      {{ vm }}.vm.provision :hostmanager
      {{ vm }}.vm.provision "shell" do |s|
        ssh_pub_key = File.readlines("{{Rsa_PrivateKey}}.pub").first.strip
        ssh_priv_key = File.read("{{Rsa_PrivateKey}}")
        s.inline = <<-SHELL
            mkdir -p /root/.ssh
            echo "#{ssh_pub_key}"  | tee -a /home/vagrant/.ssh/authorized_keys
            echo "#{ssh_pub_key}"  | tee -a /root/.ssh/authorized_keys
            echo "#{ssh_priv_key}" | tee /home/vagrant/.ssh/id_rsa
            echo "#{ssh_priv_key}" | tee /root/.ssh/id_rsa
            chmod 600 /root/.ssh/id_rsa /home/vagrant/.ssh/id_rsa
            chown vagrant. /home/vagrant/.ssh/id_rsa
        SHELL
      end
      {% if InstallType =="vbguestadditions" %}
      {{ vm }}.vbguest.installer_options = { allow_kernel_upgrade: true }
      {{ vm }}.vbguest.auto_update = false
      {{ vm }}.vm.synced_folder "/data", "/data", create: true
      {% endif %}
    end
    {% endif %}
{% endfor %}
end